#ifndef SORT_H
#define SORT_H
/* 
Алгоритмы сортировки.

*/

#include "../data_structures/list.h"

#include <vector>

using Array = std::vector<int>;

size_t countListSize(const List& list) {
    size_t n = 0;
    list_node* current_node = list.top;
    while(current_node) {
        ++n;
        current_node = current_node->next;
    }
    return n - 1; // Первый элемент является ограничителем
}

/**
 * Сортировка вставкой в массивах.
 * Время работы: O(N^2)
 * Основная идея такого метода заключается в выборе элемента из списка ввода и его вставке
 * в соответствующую позицию отсортированного списка вывода, который изначально пуст.
 * 
 * Плюсы: 
 *  + Для относительно малых масиивов (менее 10 000 элементов) является достаточно быстрым.
 *  + Для совсем маленьких массивов (5-10 элементов) может работать эффекктивнее чем более
 *    сложные алгоритмы.  
 */
Array InsertionSort(const Array& values) {
    /// ...
}

/// Сортировка выбором в массивах.

/** 
 * Сортировка пузырьком.
 * Время работы: O(N^2)
 * Предполагается что, если массив не отсортирован, то любые два смежных элемента в нем 
 * находятся в неправильном положении. 
 * Алгоритм проходит по массиву несколько раз, меняя местами все неправильные пары.
 * 
 * Плюсы:
 *  + Показывает приемлемую производительность в малых списиках (менее 1000 элементов).
 *  + Быстрее, чем более сложные алгоритмы для очень малых списков (около 5 элементов).
 */ 
void BubbleSort(Array& values) {
    /// ...
}

/**
 * Быстрая сортировка.
 * Время работы: O(N logN)
 * 
 */
void QickSort(Array& values, size_t start_pos, size_t end_pos) {
    /// Выбираем эдемент из массива. Называем его разделяющим элементом.
    size_t middle;

    /// Переносим элементы, которые меньше разделяющего, в начало массива.
    /// Переносим элементы, которые больше разделяющего или равны ему в конец массива.

    /// Пусть серединой будет индекс, где помещен разделяющий элемент.

    /// Рекурсивно сортируем две части массива.
    QickSort(values, start_pos, middle - 1);
    QickSort(values, middle + 1, end_pos);
}

#endif